type Song {
  id: ID!
  slug: String!
  title: String!
  recommendedKey: String!
  timeSignature: TimeSignature!
  bpm: Int!
}

type TimeSignature {
  top: Int!
  bottom: Int!
}

## Search filters ##

enum FilterName {
  RECOMMENDED_KEY
  BPM
  TIME_SIGNATURE
  THEME
}

"""
A filter value as appropriate for filtering a song search query.

A SearchFilterValue can be one of the following:
  * The 'value' field from a prior AvailableFilter result
  * The 'valueDisplay' field from a prior AvailableFilter result
"""
scalar SearchFilterValue

input SearchFilter {
  name: FilterName!
  """Filters songs that match any of the provided SearchFilterValues."""
  oneof: [SearchFilterValue!]!
}

## Song search results ##

type SongSearchResult {
  songs: [Song!]!
  availableFilters: [AvailableFilter!]!
}

type AvailableFilter {
  name: FilterName!
  options: [AvailableFilterValue!]!
}

type AvailableFilterValue {
  value: FilterValue!
  valueDisplay: String!
  count: Int!
}

"""
A filter value must be of a type corresponding to the filter name:

- RECOMMENDED_KEY: String
- BPM: Int
- TIME_SIGNATURE: [Int, Int]
- THEME: String
"""
scalar FilterValue

## Query ##

extend type Query {
  searchSongs(query: String, filters: [SearchFilter!]): SongSearchResult
}
